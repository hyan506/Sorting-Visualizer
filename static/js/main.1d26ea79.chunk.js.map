{"version":3,"sources":["SortingAlgorithms/mergeSort.js","SortingAlgorithms/bubbleSort.js","Shared/Util.js","SortingAlgorithms/quickSort.js","Component/NavBar/NavBar.jsx","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getbubbleSortAnimations","arr","flag","temp","bubbleSortAlg","swap","firstIndex","secondIndex","quickSortHelper","quickSort","left","right","index","pivot","partition","NavBar","props","useState","algoName","setAlgoName","Fragment","className","onClick","quick","merge","bubble","console","log","reset","SortingVisualizer","resetArray","randomIntFromInterval","setState","state","this","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","aniType","tempHeight","javaScriptSortedArray","sort","a","b","mySortedArray","arraysAreEqual","bubbleSort","mergeSort","map","value","idx","key","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d26ea79.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","export function bubbleSortAlg(arr, animations){\r\n    let flag = false;\r\n    while(!flag){\r\n        flag = true;\r\n        for(var i =0; i<arr.length-1;i++){\r\n            animations.push([i, i+1, 0]); // show comparing pair\r\n            if(arr[i]>arr[i+1]){\r\n                let temp = arr[i];\r\n                arr[i] = arr[i+1];\r\n                arr[i+1] = temp;\r\n                flag = false;\r\n                animations.push([i, i+1, 2]); // show comparing pair\r\n            }else{\r\n                animations.push([i, i+1, 1]); // show comparing pair\r\n            }\r\n                \r\n        }\r\n    }\r\n    return arr;\r\n\r\n};\r\n\r\nexport function getbubbleSortAnimations(arr) {\r\n    const animations = [];\r\n    if (arr.length <= 1) return arr;\r\n    bubbleSortAlg(arr, animations);\r\n    return animations;\r\n  }","export function swap(arr, firstIndex, secondIndex){\r\n    var temp = arr[firstIndex];\r\n    arr[firstIndex] = arr[secondIndex];\r\n    arr[secondIndex] = temp;\r\n}","import {swap} from '../Shared/Util';\r\n\r\nexport function quickSortHelper(arr){\r\n     const animations = []\r\n     return quickSort(arr,0,arr.length-1,animations);\r\n};\r\n\r\n\r\nfunction quickSort(arr, left, right,animations){\r\n    var index;\r\n\r\n    if (arr.length > 1) {\r\n        index = partition(arr, left, right, animations);\r\n        if (left < index - 1) {\r\n            quickSort(arr, left, index - 1, animations);\r\n        }\r\n        if (index < right) {\r\n            quickSort(arr, index, right, animations);\r\n        }\r\n    }\r\n    return animations;\r\n};\r\n\r\n\r\nexport function getQuickSortAnimations(arr) {\r\n    if (arr.length <= 1) return arr;\r\n    const animations = quickSortHelper(arr);\r\n    return animations;\r\n  }\r\n\r\n\r\n\r\nfunction partition(arr, left, right, animations) {\r\n    var pivot   = arr[Math.floor((right + left) / 2)],\r\n        i       = left,\r\n        j       = right;\r\n\r\n    animations.push([i, j, 10]);        // show left & right\r\n    animations.push([i, j, 11]);        //hide\r\n    while (i <= j) {\r\n        while (arr[i] < pivot) {\r\n            i++;\r\n            animations.push([i, j, 20]); //show new left\r\n            animations.push([i, j, 21]); //hide\r\n        }\r\n        while (arr[j] > pivot) {\r\n            j--;\r\n            animations.push([i, j, 20]); //show new right\r\n            animations.push([i, j, 21]); //hide\r\n        }\r\n        if (i <= j) {\r\n            animations.push([i, j, 3]); //show switch\r\n            swap(arr, i, j);\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    return i;\r\n}","import React, {useState} from 'react';\r\nimport './NavBar.css';\r\n\r\nconst NavBar = props =>{\r\n    const [algoName,setAlgoName] = useState('none');\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <h1>Sorting Algorithm Visualizer</h1>\r\n            <nav>\r\n                <ul className=\"nav__links\">\r\n                    <li><div\r\n                            className={`${algoName===\"bubble\" ? \"active\" : \"\"}`}\r\n                            onClick ={()=>setAlgoName(\"bubble\")}>\r\n                        Bubble Sort</div></li>\r\n                    <li><div\r\n                            className={`${algoName===\"merge\" ? \"active\" : \"\"}`}\r\n                            onClick ={()=>setAlgoName(\"merge\")}>\r\n                        Merge Sort</div></li>\r\n                    <li><div\r\n                            className={`${algoName===\"quick\" ? \"active\" : \"\"}`}\r\n                            onClick ={()=>setAlgoName(\"quick\")}>\r\n                        Quick Sort</div></li>\r\n                </ul>\r\n            </nav>\r\n            <button onClick={   algoName===\"quick\"  ?props.quick  :\r\n                                 algoName===\"merge\" ?props.merge :\r\n                                 algoName===\"bubble\"?props.bubble :console.log(\"nah\")}>\r\n                            {algoName===\"none\"? \"Please select algorithon\": \"Start Sorting!\"}</button>\r\n            <button onClick={props.reset}>Generate New Array</button>\r\n        </React.Fragment>\r\n        \r\n    );\r\n}\r\n\r\nexport default NavBar;","import React  from 'react';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/mergeSort';\nimport {getbubbleSortAnimations} from '../SortingAlgorithms/bubbleSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/quickSort';\nimport './SortingVisualizer.css';\nimport NavBar from '../Component/NavBar/NavBar';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 2;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 150;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#3399ff';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray=()=> {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({array});\n  }\n\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx,barTwoIdx,aniType] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      if(aniType === 3){\n        setTimeout(()=>{\n          const color = PRIMARY_COLOR;\n          const tempHeight = barOneStyle.height;\n          barOneStyle.height = barTwoStyle.height;\n          barTwoStyle.height = tempHeight;\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i*ANIMATION_SPEED_MS);\n      } else if(aniType === 10 || aniType === 20 || aniType === 11 || aniType === 21){\n        const color = (aniType === 10 || aniType === 20) ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(()=>{\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i*ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  bubbleSort() {\n    const animations = getbubbleSortAnimations(this.state.array);\n    // console.log(animations);\n    console.log(animations.length);\n    const arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < animations.length; i++) {\n      \n      const [barOneIdx,barTwoIdx,aniType] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      if(aniType !== 2){\n        const color = (aniType === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(()=>{\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i*ANIMATION_SPEED_MS);\n        \n      } else{\n        setTimeout(()=>{\n          const color = PRIMARY_COLOR;\n          const tempHeight = barOneStyle.height;\n          barOneStyle.height = barTwoStyle.height;\n          barTwoStyle.height = tempHeight;\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i*ANIMATION_SPEED_MS);\n      }\n      \n    }\n    console.log(\"gogogo!!\")\n  }\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mySortedArray = getbubbleSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mySortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <React.Fragment>\n        <NavBar \n          bubble ={() => this.bubbleSort()}\n          merge ={() => this.mergeSort()} \n          quick ={() => this.quickSort()}\n          reset ={()=> this.resetArray()}\n          />\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}></div>\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}